//GAME = (one -> WIN | two -> WIN | three -> LOSE),
//WIN = (win -> GAME),
//LOSE = (lose -> GAME).


//DOUBLE = (in[k:1..3] -> OUT[2*k] -> DOUBLE).

//NTICK(N = 4) = TICK[N],
//TICK[k:1..N] = (when (k == 1) tick -> STOP 
//				| when (k > 1) tick -> TICK[k - 1]
//				).

//BISTABLE = (trigger -> [1] -> trigger -> [0] -> BISTABLE).

//const M = 3
//TURNSTILE = (passenger -> TURNSTILE).
//CAR = (depart -> CAR).
//CONTROL = CONTROL[0],
//CONTROL[i:0..M] =
//(when (i<M) passenger -> CONTROL[i+1]|when (i == M) depart -> CONTROL[0]).
//||ROLLERCOASTER = (TURNSTILE || CONTROL || CAR).

//CLIENT = (call -> WAIT),
//WAIT = (answer -> continue -> CLIENT | timeout -> CLIENT).
//SERVER = (request -> service -> reply -> SERVER).
//||CLIENT_SERVER = (CLIENT || SERVER) /{call/request, answer/reply}.

//(M&K 3.6) A museum allows visitors to enter through the east entrance and leave through
//its west exit. Arrivals and departures are signaled to the museum controller by the turnstiles
//at the entrance and exit. At opening time, the museum director signals the controller
//that the museum is open and then the controller permits both arrivals and departures. At
//closing time, the director signals that the museum is closed, at which point only departures
//are permitted by the controller. Given that it consists of the four processes EAST,
//WEST, CONTROL and DIRECTOR , provide an FSP description for each of the processes and
//the overall composition
const N = 5
EAST = (arrive -> EAST).
WEST = (leave -> WEST).
DIRECTOR = (open -> close -> DIRECTOR).
CONTROL = CLOSED[0],
CLOSED[i:0..N] = (when (i==0) open -> OPENED[i+1]  //CLOSED[...] = (when (i==0) open -> OPENED[...]
|when (i>0) leave -> CLOSED[i-1]				//|when (...) leave -> CLOSED[...]
),
OPENED[i:0..N] = (close -> CLOSED[i]
|when (i<N) arrive -> OPENED[i+1]						//|... arrive -> OPENED[...]
|when (i>0) leave -> OPENED[i-1]						//|... leave -> OPENED[...]
).
||MUSEUM = (EAST || WEST || DIRECTOR || CONTROL).

